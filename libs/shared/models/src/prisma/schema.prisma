generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @unique(map: "id_UNIQUE") @default(autoincrement())
  email       String        @unique(map: "email_UNIQUE") @db.VarChar(100)
  username    String?       @unique(map: "username_UNIQUE") @db.VarChar(100)
  active      Int?          @default(0) @db.TinyInt
  password    String?       @db.VarChar(250)
  role        User_role?
  Category    Category[]
  Tag         Tag[]
  Transaction Transaction[]

  @@id([id, email])
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(255)
  systemDefined Int           @default(0) @db.TinyInt
  userId        Int?
  User          User?         @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "category_user_id")
  Transaction   Transaction[]

  @@index([userId], map: "userId_idx")
}

model Tag {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(50)
  systemDefined    Int                @default(0) @db.TinyInt
  userId           Int?
  User             User?              @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "tag_user_id")
  TransactionsTags TransactionsTags[]

  @@index([userId], map: "userId_idx")
}

model Transaction {
  id               Int                @id @unique(map: "id_UNIQUE") @default(autoincrement())
  description      String?            @db.VarChar(500)
  userId           Int
  date             DateTime?          @default(now()) @db.DateTime(0)
  amount           Decimal            @default(0.000) @db.Decimal(11, 3)
  expense          Int?               @default(1) @db.TinyInt
  type             Transaction_type?  @default(cash)
  categoryId       Int
  Category         Category           @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "category_id")
  User             User               @relation(fields: [userId], references: [id], onUpdate: NoAction, map: "user_id")
  TransactionsTags TransactionsTags[]

  @@index([categoryId], map: "categoryId_idx")
  @@index([userId], map: "userId_idx")
}

model TransactionsTags {
  id            Int         @id @default(autoincrement())
  transactionId Int
  tagId         Int
  Tag           Tag         @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tagId")
  Transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transactionId")

  @@index([tagId], map: "tag_id_idx")
  @@index([transactionId], map: "transaction_id_idx")
}

enum Transaction_type {
  cash
  cheque
  pending
}

enum User_role {
  admin
}
