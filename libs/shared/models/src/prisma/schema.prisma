generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @unique(map: "id_UNIQUE") @default(uuid()) @db.VarChar(36)
  email        String        @unique(map: "email_UNIQUE") @db.VarChar(50)
  username     String?       @unique(map: "username_UNIQUE") @db.VarChar(20)
  isActive     Int?          @default(1) @db.TinyInt
  password     String?       @db.VarChar(80)
  role         User_role?    @default(basic)
  categories   Category[]
  tags         Tag[]
  transactions Transaction[]

  @@id([id, email])
}

model Category {
  id           String        @id @unique(map: "id_UNIQUE") @default(uuid()) @db.VarChar(36)
  name         String        @db.VarChar(50)
  userId       String        @db.VarChar(36)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "category_userId")
  transactions Transaction[]

  @@index([userId], map: "category_userId_idx")
}

model Tag {
  id               String             @id @unique(map: "id_UNIQUE") @default(uuid()) @db.VarChar(36)
  name             String             @db.VarChar(50)
  userId           String             @db.VarChar(36)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tag_userId")
  transactionsTags TransactionsTags[]

  @@index([userId], map: "tag_userId_idx")
}

model Transaction {
  id               String             @id @unique(map: "id_UNIQUE") @default(uuid()) @db.VarChar(36)
  description      String?            @db.VarChar(250)
  userId           String             @db.VarChar(36)
  date             DateTime?          @default(now()) @db.DateTime(0)
  amount           Decimal            @default(0.000) @db.Decimal(11, 3)
  isExpense        Int?               @default(1) @db.TinyInt
  type             Transaction_type?  @default(cash)
  categoryId       String?            @db.VarChar(36)
  category         Category?          @relation(fields: [categoryId], references: [id], onUpdate: NoAction, map: "transaction_categoryId")
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "transaction_userId")
  transactionsTags TransactionsTags[]

  @@index([categoryId], map: "transaction_categoryId_idx")
  @@index([userId], map: "transaction_userId_idx")
}

model TransactionsTags {
  id            String      @id @unique(map: "id_UNIQUE") @default(uuid()) @db.VarChar(36)
  transactionId String      @db.VarChar(36)
  tagId         String      @db.VarChar(36)
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "trans_tags_tagId")
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "trans_tags_transactionId")

  @@index([tagId], map: "trans_tags_tagId_idx")
  @@index([transactionId], map: "trans_tags_transactionId_idx")
}

enum Transaction_type {
  cash
  cheque
  pending
}

enum User_role {
  admin
  basic
}
